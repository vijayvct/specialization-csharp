
.NET Framework v/s .NET (.NET Core)

In 2015, Microsoft open-sourced the .Net Framework and named it as .NET Core

.NET Core is latest version of .NET 
It has re-written from scratch making the framework light-weight and fast in nature  
It is cross-platform in nature 

.Net Core 1.0,1.1,2.0,2.1,2.2,3.0,3.1 (Deprecated)

In 2020

.NET 5 - Unified Framework (.Net Framwork + .NET Core) (Deprecated)

.NET 6 - Unified Framework

.NET 7 - Unified Framework

C#
--
C# is modern,general-purpose, object-orieneted and type-safe programming language.
It enable us to build different type of application(Desktop, Web, Cloud, Mobile, IOT etc...)
It is simple and easy learn 
It run on .NET Framework as well as on .NET (.NET Core)
It was developed by Andres Hejlsberg
It is also know as component-oriented language 

Basic C# Program 
-----------------
using System; // Namespace 

class Sample //class
{
	public static void Main(string [] args)
	{
		Console.WriteLine("Welcome to C#");
	}
}

Visual Studio 2022 (Professional/Enterprise) (Community Edition)
Visual Studio for Mac

Visual Stduio Code + .NET SDK 6 + C# Extension 

dotnet tool - unified CLI tool for creating , managing project, testing ....

dotnet new <<project-type>>	

dotnet add package <<package-name>>

dotnet --list-sdks :- to list all the sdks installed your system 
dotnet --list-runtimes :- to list all the runtime installed your system

dotnet --info 

dotnet new console -f net6.0 --use-program-main

dotnet build :- compile the code 

dotnet run :- to run or execute the application

DataType and Variables 
----------------------
Datatypes helps computer understand that what type of data has to be stored in the memory location 
It also provides the information how much memory has to be occupied and what all operations are allowed on that data types

Variables are the name given to the memory location

System.Object is the parent for all the data types 

Value Type Data 
---------------
In this, memory location itself contains the data
They place on stack 
Any assignment to these type ,will copy data into a new memory location 
At the end program all the value type data is removed from memory 

	int x = 10;
	
	int y =  x;
	
Integral Data (Integer)
	byte 
	short
	int
	long
	
Floating Point Data 
	float 
	double 
	decimal
	
Boolean - bool

Characters - char 

Structures and Enums 

Reference Type Data 
-------------------
In this, memory location contains the reference of the data 
The actual data is stored in a heap structure where as the reference of the heap is stored on the variable's memory location 
Any assignment done to this type will copy , reference of the data into the memory location
At the end of the program execution, reference type data is not removed from the memory (grabage collection or destructor)
	
	String 
	Classes and Object 
	Collections 
	Arrays 
	
	String name ="Malcolm";
	
	String newname= name;
	
Ternary Operator (Simpleified version of if-else)

	(condition)?"Statement1":"Statement2"

Accepting the input from user :- Console.ReadLine() - String 

Convert Class :- This class provides method to convert values from one datatype to another datatype 

	Convert.ToInt32()
	Convert.ToInt64()
	Convert.ToSingle()
	.
	.
	.
	
Displaying Value in Console 
---------------------------
Concatenation(+)
	Console.WriteLine("Name = "+name+", Age = "+age);
	
Place Holder 
	name = "Vijay" , age =32
	
	Console.WriteLine("Name = {0} , Age = {1}",name,age);
	
String Interpolation
	name = "Vijay" , age =32
	
	Console.WriteLine("Name = {name} , Age = {age}");
	
Nullable Types 
--------------
Nullable Types allows you to store null value in the value type variables 

string name = null; //allowed
int x = null; //error 

We can create the null types using the following syntax

	1) ? 
		datatype? variablename;
		
		int? x;
	
	2)Nullable<data-type>
	
		Nullable<bool> status= null
		
	HasValue - It will help you check whether the variable is having some data or not
	
Implicitly Typed Variables 
--------------------------
	datatype variablename;
	
	int x; x=10;
	
	x="abc";
	
In Implicitly typed variable we use "var" keyword to create a varaible.
The data type of the variable is decided based on the value assigned to the variable 

	var variablename= value;
	
	var id =101; //Integer 
	var name ="Vijay";//String 
	var obj = new Car();// car object 
	
	var result = from data in collection 
			     select data;
				 
	var result =(from data in collection 
				 where data.category == "somevalue"
				 select data).FirstOrDefault();
				 
These variable should be intialized while creating them
They cannnot have null values as compile time 

Programming Constructs
----------------------
Decision Making 
	If - Condition 
	
		If 
		If-else
		If-elseif-else 
		Nested If
		
		Logical Operators AND (&&) , OR (||), NOT (!)
		
Case Control Structure 

	Switch 
	
Loops 
	While 
	Do-While 
	For 
	
	ForEach (Arrays and Collections)
	
Arrays
------
Arrays allows us to store multiple values of similar type into a single variables.
The values in the array can be accessed by index number 

	num[0]
	num[2]
	
In .NET, when you create an array(Single-Dimensional Array or Multi-Dimesional) it is automatically mapped to the System.Array Class 

System.Array class provide properties and method to manipulate array 

Single-Dimensional Array 
------------------------
datatype [] arrayname = new datatype[size]

int [] num = new int[10];

int [] num = {value1,value2,value3....};

Double-Dimensional Array 
------------------------
datatype [,] arrayname = new datatype[rows,cols];

datatype [,] arrayname = { {}, {},{}.... }