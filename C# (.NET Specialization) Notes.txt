
.NET Framework v/s .NET (.NET Core)

In 2015, Microsoft open-sourced the .Net Framework and named it as .NET Core

.NET Core is latest version of .NET 
It has re-written from scratch making the framework light-weight and fast in nature  
It is cross-platform in nature 

.Net Core 1.0,1.1,2.0,2.1,2.2,3.0,3.1 (Deprecated)

In 2020

.NET 5 - Unified Framework (.Net Framwork + .NET Core) (Deprecated)

.NET 6 - Unified Framework

.NET 7 - Unified Framework

C#
--
C# is modern,general-purpose, object-orieneted and type-safe programming language.
It enable us to build different type of application(Desktop, Web, Cloud, Mobile, IOT etc...)
It is simple and easy learn 
It run on .NET Framework as well as on .NET (.NET Core)
It was developed by Andres Hejlsberg
It is also know as component-oriented language 

Basic C# Program 
-----------------
using System; // Namespace 

class Sample //class
{
	public static void Main(string [] args)
	{
		Console.WriteLine("Welcome to C#");
	}
}

Visual Studio 2022 (Professional/Enterprise) (Community Edition)
Visual Studio for Mac

Visual Stduio Code + .NET SDK 6 + C# Extension 

dotnet tool - unified CLI tool for creating , managing project, testing ....

dotnet new <<project-type>>	

dotnet add package <<package-name>>

dotnet --list-sdks :- to list all the sdks installed your system 
dotnet --list-runtimes :- to list all the runtime installed your system

dotnet --info 

dotnet new console -f net6.0 --use-program-main

dotnet build :- compile the code 

dotnet run :- to run or execute the application

DataType and Variables 
----------------------
Datatypes helps computer understand that what type of data has to be stored in the memory location 
It also provides the information how much memory has to be occupied and what all operations are allowed on that data types

Variables are the name given to the memory location

System.Object is the parent for all the data types 

Value Type Data 
---------------
In this, memory location itself contains the data
They place on stack 
Any assignment to these type ,will copy data into a new memory location 
At the end program all the value type data is removed from memory 

	int x = 10;
	
	int y =  x;
	
Integral Data (Integer)
	byte 
	short
	int
	long
	
Floating Point Data 
	float 
	double 
	decimal
	
Boolean - bool

Characters - char 

Structures and Enums 

Reference Type Data 
-------------------
In this, memory location contains the reference of the data 
The actual data is stored in a heap structure where as the reference of the heap is stored on the variable's memory location 
Any assignment done to this type will copy , reference of the data into the memory location
At the end of the program execution, reference type data is not removed from the memory (grabage collection or destructor)
	
	String 
	Classes and Object 
	Collections 
	Arrays 
	
	String name ="Malcolm";
	
	String newname= name;
	
Ternary Operator (Simpleified version of if-else)

	(condition)?"Statement1":"Statement2"

Accepting the input from user :- Console.ReadLine() - String 

Convert Class :- This class provides method to convert values from one datatype to another datatype 

	Convert.ToInt32()
	Convert.ToInt64()
	Convert.ToSingle()
	.
	.
	.
	
Displaying Value in Console 
---------------------------
Concatenation(+)
	Console.WriteLine("Name = "+name+", Age = "+age);
	
Place Holder 
	name = "Vijay" , age =32
	
	Console.WriteLine("Name = {0} , Age = {1}",name,age);
	
String Interpolation
	name = "Vijay" , age =32
	
	Console.WriteLine("Name = {name} , Age = {age}");
	
Nullable Types 
--------------
Nullable Types allows you to store null value in the value type variables 

string name = null; //allowed
int x = null; //error 

We can create the null types using the following syntax

	1) ? 
		datatype? variablename;
		
		int? x;
	
	2)Nullable<data-type>
	
		Nullable<bool> status= null
		
	HasValue - It will help you check whether the variable is having some data or not
	
Implicitly Typed Variables 
--------------------------
	datatype variablename;
	
	int x; x=10;
	
	x="abc";
	
In Implicitly typed variable we use "var" keyword to create a varaible.
The data type of the variable is decided based on the value assigned to the variable 

	var variablename= value;
	
	var id =101; //Integer 
	var name ="Vijay";//String 
	var obj = new Car();// car object 
	
	var result = from data in collection 
			     select data;
				 
	var result =(from data in collection 
				 where data.category == "somevalue"
				 select data).FirstOrDefault();
				 
These variable should be intialized while creating them
They cannnot have null values as compile time 

Programming Constructs
----------------------
Decision Making 
	If - Condition 
	
		If 
		If-else
		If-elseif-else 
		Nested If
		
		Logical Operators AND (&&) , OR (||), NOT (!)
		
Case Control Structure 

	Switch 
	
Loops 
	While 
	Do-While 
	For 
	
	ForEach (Arrays and Collections)
	
Arrays
------
Arrays allows us to store multiple values of similar type into a single variables.
The values in the array can be accessed by index number 

	num[0]
	num[2]
	
In .NET, when you create an array(Single-Dimensional Array or Multi-Dimesional) it is automatically mapped to the System.Array Class 

System.Array class provide properties and method to manipulate array 

Single-Dimensional Array 
------------------------
datatype [] arrayname = new datatype[size]

int [] num = new int[10];

int [] num = {value1,value2,value3....};

Double-Dimensional Array 
------------------------
datatype [,] arrayname = new datatype[rows,cols];

datatype [,] arrayname = { {}, {},{}.... }

What is Object Oriented Programming (OOP) ?
--------------------------------------------
OOP is programming paradigm which is based on the concept of objects

Objects are real-world entities , every object contains data in the form of fields and logic in the form of functions or methods 

Classes 
Object 
Data Encapsulation 
Data Abstraction 
Inheritance 
Polymorphism 

Class
-----
Class acts as a blueprint or template for creating objects.

Class is user-defined data type which consist of other data types(fields) and methods to manipulate those data-type.

	Car Class 
	---------
		Model 
		Year
		Color 
		Manufacturer
		FuelType
		
		SetCarDetails() 
		GetCarDetails()
		Accelrate()
		Turn()
		ApplyBrake()
		Horn()
		
Object
------
Object is a variable or instance of type class.
Every object will have its own copy of data members(fields).

Data Encapsulation
------------------
It deals with information hiding 

Binding the variable and methods to manipulate those variables into a single unit knows as class is called data encapsulation.

We achieve data encapsulation by using the private access modifier 

Data Abstraction
----------------
Process of providing the user with the required information without letting them know the background processing or implementation

Comments in C#
--------------
Single-Line Comments :- //Comment

Multi-Line Comments :- /* Comment */

XML Comments (Document) :- ///
	VS - It is bydefault enabled 
	VS Code - C# XML Comment 
	
Acccess Specifier 
-----------------
Public 
Private 
Protected
Internal
Protected Internal 

Polymorphism
------------
Using Polymorphism one object can have many forms 

	One Object ---> Many Forms 
	
	"+" operator --> When used with number , returns sum of numbers
					 When used with Strings, perform concatenation 
					 
    Person Object 
	
Compile/Static-Polymorphism (Overloading)
-----------------------------------------
Method Overloading
Constructor Overloading 
Operator Overloading

Runtime/Dynamic-Polymorphism (Overriding)
-----------------------------------------
Virtual Function/Methods

Properties 
----------
class Product
{
	int id;
	string name;
	double price;
	
	id--> GetId(),SetId()
	name-->GetName(),SetName()
	price-->GetPrice(),SetPrice()
}

syntax
------
access-specifier data-type PropertyName
{
	get
	{
		return _datamember;
	}
	
	set
	{
		_datamember= value;
	}
}

public int Id
{
	get
	{	
		return Id;
	}
	
	set
	{
		Id=value;
	}	
}

Product p=new Product();
p.Id =101;//Set 
Console.WriteLine(p.Id);//Get

GET - SET --> Read-Write Property
GET --> Read-Only Property
SET --> Write-Only Property

Auto-Implemented Property
-------------------------
Auto-Implemented Property allows you to create a property without a backing/data member field 
The backing fields is created and managed by CLR
Auto-Implemented Property consist of get and set declaration, there is no need of specifying body for the get and set 

Syntax 
------
access-specifier data-type PropertyName {get;set;}

public int ProductId {get;set;}

Indexers
--------
class Sample
{
	private int [] numbers=new int[10];
}

Sample s = new Sample();

	s[0]=10;
	s[2]=30;
	
Indexers allows an object of a class to behave as an array 
Indexers are similar to properties with few differences 
	-An indexer takes an argument 
	-An indexer uses this keyword instead of name 
	
access-specifier data-type this[index]
{
	get 
	{}
	
	set
	{}
}

Static 
------
Static means something which cannot be initialized
Static is a modifier which can be applied to classes, variables, methods, constructors, property, events etc

Static Class 
------------
A Static class can be declaraed using the static keyword
It can only contain static data members, method and constructors
We cannot create instance or object of a static class
We cannot inherit a static class as they sealed in nature by default 

Static Variables
----------------
Only one copy of the variable is created and shared among multiple objects at the class level

Static Methods 
--------------
Static methods are accessible by class name 
It can access static and non-static fields 

Static Constructor
------------------
It is invoked once per class and its called while creating the first static member of the class 
It can be used to initiliaze static fields of the class
You cannot specify access specifier and parameters to this constructor

Inheritance
-----------
Inheritance allows onc class to access the properties of the other class
It support re-usability and save developers time by extending the existing with new set of features.
In Inheritance, all the public members of the parent or base class are inherited by the child or derived class

Types of Inheritance
--------------------
Single 
Multi-Level 
Multiple 
Hybrid
Heirarichal 

Generalization (Base) 

Specialization (Derived)

Access Specifiers 
-----------------
Public
Private 
Protected 
Internal 
Protected Internal 

Do Constructor Participate in Inheritance ? - Yes

If parent and child both classes has got parameterless constructor, while creating the object of the child class , the child constructor will automatically invokes the base class constructor

Abstract Class 
--------------
Abstract classes are incomplete class 
We cannot create an object of an Abstract class 
It will always acts as base class 
It can contain data member, constructors, properties, methods(concrete, virtual and abstract)

The child implements all the abstract member of the abstract class

Exception Handling 
------------------
1) 
	string name ="Malcolm" - Compile-Time Error 
	
	
2)
	while(true)
	{
		Console.WriteLine("Hello User...");
	}
	
3)
	int x=100/0; - Run-Time Error (Exception)
	
Exception Handling 
------------------

try - catch 

	try
	{
		//statements 
	}
	catch(ExceptionType)
	{
		//statement 
	}
	catch(ExceptionType)
	{
		//statement
	}
	.
	.
	finally
	{
		//statement
	}
	
	public void Divide(int x,int y)
	{
		if(y==1)
		{
			Console.WriteLine("Result = "+(x/y));
		}
		else
		{
			throw Exception("Divisor Cannot be 0");
		}
	}
	
	public static void Main(String [] args)
	{
		try 
		{
			Divide(10,2);
			Divide(10,0);
		}
		catch(Exception ex)
		{
			//statement 
		}
	}
	
Custom Exception Classes 
------------------------
It is useful in situation where you want perform some custom logic execution and raise exception if the logic is not satisfied 

Delegates 
---------
Delegates are reference types 
They are similar to function pointer of C or C++
They are useful in implementing Callback and event handling in .NET 

Steps 
-----
1)Delegate Declaration 
	
	delegate void MyDelegate();
	delegate string MyDelegate1(string name);
	
2)Delegate Method Declaration 

3)Initialize the delegate 

4)Invoke the method through delegate 
	
Types of Delegate 
-----------------
-Single Cast Delegate - Single Method in one Delegate object  
-Multi Cast Delegate - Multiple method in one Delegate Object 

Generics 
--------

Class to store 2 numeric values 

byte ,short, int, long , float, double, decimal 

Generics were introduced in C# 2.0 with .NET Framework 2.0
Generic uses the concept of type parameters which all you to create a type without mentioning the exact data type while creating it/
We specify the datatype at compile when we create the object or onvoking generic methods 
It provide type-safety 

Generic Constraints 
-------------------
Generic Constraints allows you to provide more granular level decision to decide what type of data can be passed as a type parameter

Collections 
-----------
Object-Based Collections - System.Collections 

	ArrayList 
	HashTable
	Stack 
	Queue
	SortedList 
	
Generic Collection - System.Collections.Generic 

	List 
	Stack
	Queue
	Dictionary
	LinkedList 
	HashSet 
	
File IO 
	File and FileInfo 
	Directory and DirectoryInfo 
	FileStream 
	StreamReader and StreamWriter 
	Serialization 
		Binary 
		SOAP 
		XML
		
ADO.NET 
-------
It is data access technology used for developing data-driven application.
It support's Connected and Disconnected Architecture 

It uses of data provider for data access 

	Connection
	Command 
	DataReader
	DataAdapter + DataSet 
	
.NET Data Provider for SQL Server - System.Data.SqlClient 

	SqlConnection 
	SqlCommand
	SqlDataReader
	SqlDataAdapter 
	
.NET Data Provider for Oracle - System.Data.OracleClient 

	OracleConnection
	OracleCommand 
	OracleDataReader
	OracleDataAdapter 
	
.
.

dotnet add package Microsoft.Data.SqlClient --version 5.1.0

connection string 

	"data source=servername or ipaddress;
	 initial catalog=databasename;
	 user id=sa;password=Password_123"
	 
	 
Install-Package 
	 
dotnet add package Microsoft.Extensions.Configuration 
dotnet add package Microsoft.Extensions.Configuration.Json
dotnet add package Microsoft.Extensions.Configuration.CommandLine
dotnet add package Microsoft.Extensions.Configuration.Binder
dotnet add package Microsoft.Extensions.Configuration.EnvironmentVariables   
